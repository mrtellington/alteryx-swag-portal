name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: alteryx-swag-portal

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Debug environment
      run: |
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
    
    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        npm ci
        echo "Dependencies installed successfully"
    
    - name: Build application
      run: |
        echo "Building application..."
        npm run build
        echo "Build completed successfully"
        echo "Build output:"
        ls -la .next
    
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure gcloud
      run: |
        echo "Configuring gcloud..."
        gcloud config set project ${{ env.PROJECT_ID }}
        gcloud config set run/region ${{ env.REGION }}
        echo "Configuration complete"
    
    - name: Enable required APIs
      run: |
        echo "Enabling APIs..."
        gcloud services enable cloudbuild.googleapis.com || echo "Cloud Build API already enabled"
        gcloud services enable run.googleapis.com || echo "Cloud Run API already enabled"
        gcloud services enable containerregistry.googleapis.com || echo "Container Registry API already enabled"
        echo "APIs enabled"
    
    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest .
        echo "Docker build completed"
    
    - name: Push Docker image
      run: |
        echo "Pushing Docker image..."
        docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
        echo "Docker push completed"
    
    - name: Deploy to Cloud Run
      run: |
        echo "Deploying to Cloud Run..."
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10
        echo "Deployment completed"
    
    - name: Update environment variables
      run: |
        echo "Updating environment variables..."
        gcloud run services update ${{ env.SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --update-env-vars="SUPABASE_URL=${{ secrets.SUPABASE_URL }},NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }},SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }},NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }},SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }},GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }},NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }},NEXT_PUBLIC_APP_URL=${{ secrets.APP_URL }},SMTP_HOST=${{ secrets.SMTP_HOST }},SMTP_PORT=${{ secrets.SMTP_PORT }},SMTP_USER=${{ secrets.SMTP_USER }},SMTP_PASS=${{ secrets.SMTP_PASS }},FROM_EMAIL=${{ secrets.FROM_EMAIL }},WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }}"
        echo "Environment variables updated"
    
    - name: Show service URL
      run: |
        echo "Getting service URL..."
        gcloud run services describe ${{ env.SERVICE_NAME }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format 'value(status.url)'
